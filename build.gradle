/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5.1/userguide/tutorial_java_projects.html
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'

    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building a CLI application
    id 'application'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    flatDir {
        dirs 'lib'
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9
}

version = '3.0.0-rc7'

application {
    // Define the main class for the application
    mainClassName = 'edu.umich.andykong.ptmshepherd.PTMShepherd'
}

sourceSets {
    main {
         java {
            srcDirs = ['src']
         }
        resources {
            srcDirs = ['resources', 'src', 'test-resources']
            include "**/*.txt"
        }
    }

    test {
        java {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['test-resources']
            include "**/*.txt"
            include "**/*.tsv"
        }
    }
}

dependencies {
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation files("lib/batmass-io-1.33.4.jar")
    // https://mvnrepository.com/artifact/org.apache.commons/commons-math3
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.0'

    // https://mvnrepository.com/artifact/org.hipparchus/hipparchus
    //implementation group: 'org.hipparchus', name: 'hipparchus', version: '1.8', ext: 'pom'
    implementation 'org.hipparchus:hipparchus-stat:1.8'
    implementation 'org.apache.commons:commons-lang3:3.0'
//    implementation name: 'msftbx'

    implementation 'junit:junit:4.13.1'

    // testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

shadowJar {
    exclude '**/*.java'
    exclude '**/*.html'
    exclude '**/OSGI-OPT/'
    archiveClassifier = null
    mergeServiceFiles() // https://stackoverflow.com/a/73349585
}

task packageWithDeps(group: 'ptm-shepherd') {
    dependsOn 'clean'
    dependsOn 'test'
    dependsOn 'installShadowDist'
    tasks.findByName('installShadowDist').mustRunAfter 'clean'
    tasks.findByName('installShadowDist').mustRunAfter 'test'
}

task packageNoDeps(group: 'ptm-shepherd') {
    dependsOn 'clean'
    dependsOn 'jar'
    dependsOn 'test'
    tasks.findByName('jar').mustRunAfter 'clean'
    tasks.findByName('jar').mustRunAfter 'test'
}

task updateFragpipeJar(group: 'ptm-shepherd', type: Copy) {
    dependsOn 'packageNoDeps'
    String dest = "$buildDir/libs/"
    if (!file(dest).exists()) {
        println "ERROR: Destination directory does not exist: " + dest
    } else {
        copy {
            from "$buildDir/libs/"
            include "ptms*.jar"
            into file(dest)
            //rename '(.+)(\\.jar)', '$1' + '.jazz'
        }
    }
}


task printSrcSets(group: 'ptm-shepherd') {
    doLast {
        sourceSets.each { ss ->
            println ss
            ss.getJava().each { srcpath ->
                println "java -> ${srcpath}"
            }
            ss.getResources().each { srcpath ->
                println "resources -> ${srcpath}"
            }
        }

    }
}
